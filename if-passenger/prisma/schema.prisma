// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String      @id @default(uuid())
  name           String?
  email          String?     @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  cars           Car[]
  course         Course?     @relation(fields: [courseId], references: [id])
  courseId       String?
  city           City?       @relation(fields: [cityId], references: [id])
  cityId         String?
  drivenTrips    Trip[]      @relation("driver")
  secondaryTrips Trip[]      @relation("secondaryDriver")
  passengerAt    Passenger[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Car {
  id           String @id @default(uuid())
  brand        String
  model        String
  year         String
  passengers   Int
  owner        User   @relation(fields: [userId], references: [id])
  userId       String
  licensePlate String
}

model City {
  id        String @id @default(uuid())
  name      String
  users     User[]
  TripsFrom Trip[] @relation("tripFrom")
  TripsTo   Trip[] @relation("tripTo")
}

model Course {
  id    String @id @default(uuid())
  name  String
  users User[]
}

model Trip {
  id                String      @id @default(uuid())
  driver            User        @relation("driver", fields: [driverId], references: [id])
  driverId          String
  passengers        Passenger[]
  secondaryDriver   User?       @relation("secondaryDriver", fields: [secondaryDriverId], references: [id])
  secondaryDriverId String?
  from              City        @relation("tripFrom", fields: [fromId], references: [id])
  fromId            String
  to                City        @relation("tripTo", fields: [toId], references: [id])
  toId              String
  maxPassengers     Int
  price             Float
  when              DateTime
  notes             String?
  createdAt         DateTime    @default(now())
  deletedAt         DateTime?
}

model Passenger {
  id     String @id @default(uuid())
  userId String
  tripId String
  User   User   @relation(fields: [userId], references: [id])
  Trip   Trip   @relation(fields: [tripId], references: [id])
}
